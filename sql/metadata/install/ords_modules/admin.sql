-- Generated by ORDS REST Data Services 23.4.0.r3461619
-- Schema: LIVE_SQL  Date: Wed Apr 10 12:24:33 2024 
--

BEGIN
  ORDS.DEFINE_MODULE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_base_path      => '/api/admin/',
      p_items_per_page => 25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 24,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    TUTORIALS.*,
    TUTORIALS.ID AS "$self"
FROM
    TUTORIALS');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_TUTORIAL_ID NUMBER;
BEGIN
    INSERT INTO TUTORIALS(
        TITLE,
        DESCRIPTION,
        SETUP_CODE,
        SETUP_DESCRIPTION,
        TAGS,
        SHARE_KEY,
        CREATED_BY,
        UPDATED_BY
    ) VALUES (
        :title,
        :description,
        :setup_code,
        :setup_description,
        :tags,
        NULL,
        -- TODO: Change to the current user
        ''LIVE_SQL'',
        -- TODO: Change to the current user
        ''LIVE_SQL''
    ) RETURNING ID INTO L_TUTORIAL_ID;
    :status_code := 201;
    :forward_location := L_TUTORIAL_ID;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id',
      p_method         => 'GET',
      p_source_type    => 'json/item',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    TUTORIALS.*,
    ID || ''/steps/'' AS "$steps"
FROM
    TUTORIALS
WHERE
    ID = :tutorial_id');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    UPDATE TUTORIALS
    SET
        TITLE = :title,
        DESCRIPTION = :description,
        SETUP_CODE = :setup_code,
        SETUP_DESCRIPTION = :setup_description,
        PUBLISHED = :published,
        TAGS = :tags,
        -- NOTE: Not updating share key as that''s the job for another endpoint
        -- TODO: Change to the current user
        UPDATED_BY = ''LIVE_SQL'' --,
        -- UPDATED_ON = NULL --
    WHERE
        ID = :tutorial_id;
    :status_code := 200;
    :forward_location := :tutorial_id;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    DELETE FROM TUTORIALS WHERE ID = :tutorial_id;
    :status_code := 204;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id/steps/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id/steps/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    TUTORIALS_STEPS.*,
    ID AS "$self"
FROM
    TUTORIALS_STEPS
WHERE
    TUTORIAL_ID = :tutorial_id');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id/steps/',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_STEP_ID NUMBER;
BEGIN
    INSERT INTO TUTORIALS_STEPS(
        SORTING,
        TITLE,
        CONTENT,
        TUTORIAL_ID,
        CREATED_BY,
        UPDATED_BY
    ) VALUES(
        :sorting,
        :title,
        :content,
        :tutorial_id,
        -- TODO: Change to the current user
        ''LIVE_SQL'',
        -- TODO: Change to the current user
        ''LIVE_SQL''
    ) RETURNING ID INTO L_STEP_ID;
    :status_code := 201;
    :forward_location := L_STEP_ID;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id/steps/:step_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id/steps/:step_id',
      p_method         => 'GET',
      p_source_type    => 'json/item',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    *
FROM
    TUTORIALS_STEPS
WHERE
    TUTORIAL_ID = :tutorial_id
    AND ID = :step_id');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id/steps/:step_id',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    UPDATE TUTORIALS_STEPS
    SET
        SORTING = :sorting,
        TITLE = :title,
        CONTENT = :content,
        -- TODO: Change to the current user
        UPDATED_BY = ''LIVE_SQL''--,
        --UPDATED_ON = NULL
    WHERE
        TUTORIAL_ID = :tutorial_id
        AND ID = :step_id;
    :status_code := 200;
    :forward_location := :step_id;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/:tutorial_id/steps/:step_id',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    DELETE FROM TUTORIALS_STEPS WHERE TUTORIAL_ID = :tutorial_id AND ID = :step_id;
    :status_code := 204;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'databases/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'databases/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT 
    DATABASES.*,
    ID AS "$self"
FROM
    DATABASES');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'databases/',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_DATABASE_ID NUMBER;
BEGIN
    INSERT INTO DATABASES(
        NAME,
        TYPE,
        VERSION,
        REST_SQL_BASE_URL,
        ADMIN_SCHEMA_NAME,
        ADMIN_SCHEMA_ALIAS,
        ADMIN_OAUTH_CLIENT_ID,
        ADMIN_OAUTH_CLIENT_SECRET,
        CREATED_BY,
        UPDATED_BY
    ) VALUES (
        :name,
        :type,
        :version,
        :rest_sql_base_url,
        :admin_schema_name,
        :admin_schema_alias,
        :admin_oauth_client_id,
        :admin_oauth_client_secret,
        -- TODO: Change to the current user
        ''LIVE_SQL'',
        -- TODO: Change to the current user
        ''LIVE_SQL''
    ) RETURNING ID INTO L_DATABASE_ID;
    :status_code := 201;
    :forward_location := L_DATABASE_ID;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
 ' || '           );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'databases/:database_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'databases/:database_id',
      p_method         => 'GET',
      p_source_type    => 'json/item',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    DATABASES.*,
    ''../schemas/?q={"DATABASE_ID": '' || ID || ''}'' AS "$schemas"
FROM
    DATABASES
WHERE
    ID = :database_id');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'databases/:database_id',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    UPDATE DATABASES
    SET
        NAME = :name,
        TYPE = :type,
        VERSION = :version,
        REST_SQL_BASE_URL = :rest_sql_base_url,
        ADMIN_SCHEMA_NAME = :admin_schema_name,
        ADMIN_SCHEMA_ALIAS = :admin_schema_alias,
        ADMIN_OAUTH_CLIENT_ID = :admin_oauth_client_id,
        ADMIN_OAUTH_CLIENT_SECRET = :admin_oauth_client_secret,
        -- TODO: Change to the current user
        UPDATED_BY = ''LIVE_SQL'',
        UPDATED_ON = NULL
    WHERE
        ID = :database_id;
    :status_code := 200;
    :forward_location := :database_id;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'databases/:database_id',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    DELETE FROM DATABASES WHERE ID = :database_id;
    :status_code := 204;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'schemas/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'schemas/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    SCHEMAS.*,
    ID AS "$self"
FROM
    SCHEMAS');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'schemas/',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_SCHEMAS_ID SCHEMAS.ID%TYPE;

    L_SCHEMA_NAME SCHEMAS.NAME%TYPE := :name;
    L_SCHEMA_ALIAS SCHEMAS.ALIAS%TYPE;

    EXCEPTION INVALID_SCHEMA_NAME;
BEGIN
    IF NOT REGEXP_LIKE( ''^[A-Z0-9_]{1,14}$'', L_SCHEMA_NAME ) THEN
        RAISE INVALID_SCHEMA_NAME;
    END IF;

    L_SCHEMA_NAME := ''LIVE_SQL_SCHEMA_'' || TRIM( BOTH ''_'' FROM L_SCHEMA_NAME );
    L_SCHEMA_ALIAS := LOWER( L_SCHEMA_NAME );

    INSERT INTO SCHEMAS(
        NAME,
        ALIAS,
        STATUS,
        DATABASE_ID,
        CREATED_ON,
        CREATED_BY,
        UPDATED_ON,
        UPDATED_BY
    ) VALUES (
        L_SCHEMA_NAME,
        L_SCHEMA_ALIAS,
        -- NOTE: Schemas are created in BULK via a job
        ''NEW'',
        :database_id,
        -- TODO: Change to the current user
        ''LIVE_SQL'',
        -- TODO: Change to the current user
        ''LIVE_SQL''
    ) RETURNING ID INTO L_SCHEMAS_ID;

    -- TODO: Create PROCESS_SCHEMAS job
    -- DBMS_SCHEDULER.RUN_JOB( ''PROCESS_SCHEMAS'' );

    :s' || 'tatus_code := 201;
    :forward_location := L_SCHEMAS_ID;
EXCEPTION
    WHEN INVALID_SCHEMA_NAME THEN
        :errorReason := UTILITIES.STRING_TO_ERROR_REASON(
            ''The provided schema name is invalid. Please provide a schema name containing at least 1 and up to 14 ASCII uppercase alphabetic characters, numbers or underscores''
        );
        :status_code := 400;
    WHEN OTHERS THEN
        :errorReason := UTILITIES.STRING_TO_ERROR_REASON( SQLERRM );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'schemas/:schema_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'schemas/:schema_id',
      p_method         => 'GET',
      p_source_type    => 'json/item',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    SCHEMAS.*,
    ''../databases/'' || DATABASE_ID AS "$database"
FROM
    SCHEMAS
WHERE
    ID = :schema_id');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'schemas/:schema_id',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    UPDATE SCHEMAS
    SET
        NAME = :name,
        ALIAS = :alias,
        CLIENT_ID = :client_id,
        CLIENT_SECRET = :client_secret,
        STATUS = :status,
        DATABASE_ID = :database_id,
        -- NOTE: Not updating LAST_USED_ON because that should be updated when making a REST call to the schema
        -- TODO: Change to the current user
        UPDATED_BY = ''LIVE_SQL'',
        UPDATED_ON = NULL
    WHERE
        ID = :schema_id;
    :status_code := 200;
    :forward_location := :schema_id;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'schemas/:schema_id',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    DELETE FROM SCHEMAS WHERE ID = :schema_id;
    :status_code := 204;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'schemas/batch/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'schemas/batch/',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_INSERTED_ROWS_COUNT NUMBER;
    L_CURRENT_ERROR_MESSAGE VARCHAR2(32767);
    L_CURRENT_LINK_HREF VARCHAR2(32767);
    L_RESPONSE CLOB;

    L_BATCH_SIZE INTEGER := :batch_size;
    L_DATABASE_ID SCHEMAS.DATABASE_ID%TYPE := :database_id;
    L_DOES_DATABASE_EXISTS VARCHAR(1) := ''N'';

    TYPE T_INSERTED_SCHEMA IS RECORD(
        ID SCHEMAS.ID%TYPE,
        NAME SCHEMAS.NAME%TYPE
    );
    TYPE T_INSERTED_SCHEMAS IS TABLE OF T_INSERTED_SCHEMA;

    L_SCHEMAS_NAMES T_ORDS_VCHAR_TAB;
    L_INSERTED_SCHEMAS T_INSERTED_SCHEMAS;

    C_INVALID_BATCH_SIZE_MESSAGE CONSTANT VARCHAR2(128) := ''Invalid batch size. Please use a batch size between 1 and 50'';
    C_INVALID_DATABASE_ID_MESSAGE CONSTANT VARCHAR2(128) := ''Invalid database ID'';

    INVALID_BATCH_SIZE EXCEPTION;
    INVALID_DATABASE_ID EXCEPTION;
    DML_ERRORS EXCEPTION;
    PRAGMA EXCEPTION_INIT( DML_ERRORS, -24381 );

    PROCEDURE APPEND_SUCCESS_KEYS_TO_RESPONSE IS
    BEGIN
        DBMS_LOB.APPEND( L_RESPONSE, ''"items"' || ':['' );
            FOR I IN L_INSERTED_SCHEMAS.FIRST .. L_INSERTED_SCHEMAS.LAST LOOP
                IF I > 1 THEN
                    DBMS_LOB.APPEND( L_RESPONSE, '','' );
                END IF;
                DBMS_LOB.APPEND( L_RESPONSE, ''{'' );
                    DBMS_LOB.APPEND( L_RESPONSE, ''"name":"'' );
                    DBMS_LOB.APPEND( L_RESPONSE, ORDS_UTIL.STRING_TO_JSON( L_INSERTED_SCHEMAS( I ).NAME ) );
                    DBMS_LOB.APPEND( L_RESPONSE, ''",'' );
                    DBMS_LOB.APPEND( L_RESPONSE, ''"id":"'' );
                    DBMS_LOB.APPEND( L_RESPONSE, TO_CHAR( L_INSERTED_SCHEMAS( I ).ID ) );
                    DBMS_LOB.APPEND( L_RESPONSE, ''",'' );
                    DBMS_LOB.APPEND( L_RESPONSE, ''"links":['' );
                        DBMS_LOB.APPEND( L_RESPONSE, ''{'' );
                            DBMS_LOB.APPEND( L_RESPONSE, ''"rel":"self",'' );
                            DBMS_LOB.APPEND( L_RESPONSE, ''"href":"'' );
                            L_CURRENT_LINK_HR' || 'EF := ''../'' || L_INSERTED_SCHEMAS( I ).ID;
                            DBMS_LOB.APPEND( L_RESPONSE, ORDS_UTIL.STRING_TO_JSON( L_CURRENT_LINK_HREF ) );
                            L_CURRENT_LINK_HREF := NULL;
                            DBMS_LOB.APPEND( L_RESPONSE, ''"'' );
                        DBMS_LOB.APPEND( L_RESPONSE, ''}'' );
                    DBMS_LOB.APPEND( L_RESPONSE, '']'' );
                DBMS_LOB.APPEND( L_RESPONSE, ''}'' );
            END LOOP;
        DBMS_LOB.APPEND( L_RESPONSE, ''],'' );
        DBMS_LOB.APPEND( L_RESPONSE, ''"count":'' );
        DBMS_LOB.APPEND( L_RESPONSE, TO_CHAR( L_INSERTED_ROWS_COUNT ) );
    END;
    PROCEDURE APPEND_ERROR_KEYS_TO_RESPONSE IS
    BEGIN
        DBMS_LOB.APPEND( L_RESPONSE, ''"errors":['' );
            FOR I IN 1 .. SQL%BULK_EXCEPTIONS.COUNT LOOP
                IF I > 1 THEN
                    DBMS_LOB.APPEND( L_RESPONSE, '','' );
                END IF;
                DBMS_LOB.APPEND( L_RESPONSE, ''{'' );
                    DBMS_LOB.AP' || 'PEND( L_RESPONSE, ''"name":"'' );
                    DBMS_LOB.APPEND( L_RESPONSE, ORDS_UTIL.STRING_TO_JSON( L_SCHEMAS_NAMES( SQL%BULK_EXCEPTIONS( I ).ERROR_INDEX ) ) );
                    DBMS_LOB.APPEND( L_RESPONSE, ''",'' );
                    DBMS_LOB.APPEND( L_RESPONSE, ''"sqlerrm":"'' );
                    L_CURRENT_ERROR_MESSAGE := SQLERRM( -1 * SQL%BULK_EXCEPTIONS( I ).ERROR_CODE );
                    DBMS_LOB.APPEND( L_RESPONSE, ORDS_UTIL.STRING_TO_JSON( L_CURRENT_ERROR_MESSAGE ) );
                    L_CURRENT_ERROR_MESSAGE := NULL;
                    DBMS_LOB.APPEND( L_RESPONSE, ''"'' );
                DBMS_LOB.APPEND( L_RESPONSE, ''}'' );
            END LOOP;
        DBMS_LOB.APPEND( L_RESPONSE, ''],'' );
        DBMS_LOB.APPEND( L_RESPONSE, ''"sqlerrm":"'' );
        L_CURRENT_ERROR_MESSAGE := SQLERRM;
        DBMS_LOB.APPEND( L_RESPONSE, ORDS_UTIL.STRING_TO_JSON( L_CURRENT_ERROR_MESSAGE ) );
        L_CURRENT_ERROR_MESSAGE := NULL;
        DBMS_LOB.APPEND( L_RESPONSE, ''"'' );
  ' || '  END;
BEGIN
    IF L_BATCH_SIZE <= 0 OR L_BATCH_SIZE > 50 THEN
        RAISE INVALID_BATCH_SIZE;
    END IF;

    SELECT
        CASE WHEN COUNT( 1 ) > 0 THEN ''Y'' ELSE ''N'' END AS DOES_DATABASE_EXISTS
    INTO
        L_DOES_DATABASE_EXISTS
    FROM
        (
            SELECT ID FROM DATABASES WHERE ID = L_DATABASE_ID
        );
    IF L_DOES_DATABASE_EXISTS = ''N'' THEN
        RAISE INVALID_DATABASE_ID;
    END IF;

    WITH GENERATED_SCHEMA_NAMES AS (
        SELECT
            ''LIVE_SQL_SCHEMA_'' || DBMS_RANDOM.STRING( ''X'', 14 ) AS NAME
        FROM
            DUAL
        CONNECT BY
            LEVEL <= L_BATCH_SIZE * 10
    )
    SELECT
        NAME
    BULK COLLECT INTO
        L_SCHEMAS_NAMES
    FROM
        GENERATED_SCHEMA_NAMES
    WHERE
        -- TODO: Check performance against JOIN
        NAME NOT IN ( SELECT NAME FROM SCHEMAS WHERE NAME = GENERATED_SCHEMA_NAMES.NAME )
        AND ROWNUM <= L_BATCH_SIZE;

    FORALL I IN 1 .. L_SCHEMAS_NAMES.COUNT SAVE EXCEPTIONS
      ' || '  INSERT INTO SCHEMAS(
            NAME,
            ALIAS,
            STATUS,
            DATABASE_ID,
            CREATED_BY,
            UPDATED_BY
        ) VALUES (
            L_SCHEMAS_NAMES( I ),
            LOWER( L_SCHEMAS_NAMES( I ) ),
            -- NOTE: Schemas are created in BULK via a job
            ''NEW'',
            :database_id,
            -- TODO: Change to the current user
            ''ADMIN'',
            -- TODO: Change to the current user
            ''ADMIN''
        ) RETURNING ID, NAME BULK COLLECT INTO L_INSERTED_SCHEMAS;

    -- TODO: Create PROCESS_SCHEMAS job
    -- DBMS_SCHEDULER.RUN_JOB( ''PROCESS_SCHEMAS'' );

    L_INSERTED_ROWS_COUNT := SQL%ROWCOUNT;

    DBMS_LOB.CREATETEMPORARY( L_RESPONSE, TRUE, DBMS_LOB.CALL );
    DBMS_LOB.APPEND( L_RESPONSE, ''{'' );
    APPEND_SUCCESS_KEYS_TO_RESPONSE();
    DBMS_LOB.APPEND( L_RESPONSE, ''}'' );

    :status_code := 201;
    OWA_UTIL.MIME_HEADER(
        CCONTENT_TYPE => ''application/json'',
        BCLOSE_HEADER => ' || 'TRUE
    );
    ORDS_UTIL.HTP_PRINT_CLOB( L_RESPONSE );
    DBMS_LOB.FREETEMPORARY( L_RESPONSE );
EXCEPTION
    WHEN INVALID_BATCH_SIZE THEN
        :errorReason := UTILITIES.STRING_TO_ERROR_REASON( C_INVALID_BATCH_SIZE_MESSAGE);
        :status_code := 400;
    WHEN INVALID_DATABASE_ID THEN
        :errorReason := UTILITIES.STRING_TO_ERROR_REASON( C_INVALID_DATABASE_ID_MESSAGE );
        :status_code := 400;
    WHEN DML_ERRORS THEN
        BEGIN
            L_INSERTED_ROWS_COUNT := SQL%ROWCOUNT;

            DBMS_LOB.CREATETEMPORARY( L_RESPONSE, TRUE, DBMS_LOB.CALL );
            DBMS_LOB.APPEND( L_RESPONSE, ''{'' );
                APPEND_SUCCESS_KEYS_TO_RESPONSE();
                DBMS_LOB.APPEND( L_RESPONSE, '','' );
                APPEND_ERROR_KEYS_TO_RESPONSE();
            DBMS_LOB.APPEND( L_RESPONSE, ''}'' );

            :status_code := CASE WHEN L_INSERTED_ROWS_COUNT > 0 THEN 201 ELSE 500 END;
            OWA_UTIL.MIME_HEADER(
                CCONTENT_TYPE => ''application/json'',
                BCLO' || 'SE_HEADER => TRUE
            );
            ORDS_UTIL.HTP_PRINT_CLOB( L_RESPONSE );
            DBMS_LOB.FREETEMPORARY( L_RESPONSE );
        EXCEPTION
            WHEN OTHERS THEN
                :errorReason := UTILITIES.STRING_TO_ERROR_REASON( SQLERRM );
                :status_code := 400;
        END;
    WHEN OTHERS THEN
        :errorReason := UTILITIES.STRING_TO_ERROR_REASON( SQLERRM );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'users/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'users/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    USERS.*,
    USERS.ID as "$self"
FROM
    USERS');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'users/',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_USERS_ID USERS.ID%TYPE;
BEGIN
    INSERT INTO USERS(
        EMAIL,
        DISPLAY_NAME,
        DISCLAIMER_ACCEPTED_ON,
        CREATED_BY,
        UPDATED_BY
    ) VALUES (
        :email,
        :display_name,
        CURRENT_TIMESTAMP,
        -- TODO: Change to the current user
        ''LIVE_SQL'',
        -- TODO: Change to the current user
        ''LIVE_SQL''
    ) RETURNING ID INTO L_USERS_ID;

    :status_code := 201;
    :forward_location := L_USERS_ID;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := UTILITIES.STRING_TO_ERROR_REASON( SQLERRM );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'users/:user_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'users/:user_id',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    USERS.*,
    ID || ''/statements/'' AS "$statements"
FROM
    USERS
WHERE
    ID = :user_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 24,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    SCRIPTS.*,
    SCRIPTS.SCRIPT_ID AS "$self"
FROM
    SCRIPTS');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_SCRIPT_ID NUMBER;
BEGIN
    INSERT INTO SCRIPTS(
        TITLE,
        DESCRIPTION,
        SETUP_CODE,
        SETUP_DESCRIPTION,
        TAGS,
        SHARE_KEY,
        CREATED_BY,
        UPDATED_BY
    ) VALUES (
        :title,
        :description,
        :setup_code,
        :setup_description,
        :tags,
        NULL,
        -- TODO: Change to the current user
        ''LIVE_SQL'',
        -- TODO: Change to the current user
        ''LIVE_SQL''
    ) RETURNING SCRIPT_ID INTO L_SCRIPT_ID;
    :status_code := 201;
    :forward_location := L_SCRIPT_ID;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id',
      p_method         => 'GET',
      p_source_type    => 'json/item',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    SCRIPTS.*,
    SCRIPT_ID || ''/statements/'' AS "$statements"
FROM
    SCRIPTS
WHERE
    SCRIPT_ID = :script_id');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    UPDATE SCRIPTS
    SET
        TITLE = :title,
        DESCRIPTION = :description,
        SETUP_CODE = :setup_code,
        SETUP_DESCRIPTION = :setup_description,
        PUBLISHED = :published,
        TAGS = :tags,
        -- NOTE: Not updating share key as that''s the job for another endpoint
        -- TODO: Change to the current user
        UPDATED_BY = ''LIVE_SQL'' --,
        -- UPDATED_ON = NULL --
    WHERE
        SCRIPT_ID = :script_id;
    :status_code := 200;
    :forward_location := :script_id;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    DELETE FROM SCRIPTS WHERE SCRIPT_ID = :script_id;
    :status_code := 204;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id/statements/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id/statements/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    SCRIPTS_STATEMENTS.*,
    ID AS "$self"
FROM
    SCRIPTS_STATEMENTS
WHERE
    SCRIPT_ID = :script_id');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id/statements/',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_STATEMENT_ID NUMBER;
BEGIN
    INSERT INTO SCRIPTS_STATEMENTS(
        SORTING,
        TITLE,
        CONTENT,
        SCRIPT_ID,
        CREATED_BY,
        UPDATED_BY
    ) VALUES(
        :sorting,
        :title,
        :content,
        :script_id,
        -- TODO: Change to the current user
        ''LIVE_SQL'',
        -- TODO: Change to the current user
        ''LIVE_SQL''
    ) RETURNING ID INTO L_STATEMENT_ID;
    :status_code := 201;
    :forward_location := L_STATEMENT_ID;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id/statements/:statement_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id/statements/:statement_id',
      p_method         => 'GET',
      p_source_type    => 'json/item',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
    SCRIPTS_STATEMENTS.*,
    ID AS "$self"
FROM
    SCRIPTS_STATEMENTS
WHERE
    SCRIPT_ID = :script_id
    AND ID = :statement_id');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id/statements/:statement_id',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    UPDATE SCRIPTS_STATEMENTS
    SET
        SORTING = :sorting,
        TITLE = :title,
        CONTENT = :content,
        -- TODO: Change to the current user
        UPDATED_BY = ''LIVE_SQL''--,
        --UPDATED_ON = NULL
    WHERE
        SCRIPT_ID = :script_id
        AND ID = :statement_id;
    :status_code := 200;
    :forward_location := :statement_id;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/:script_id/statements/:statement_id',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    DELETE FROM SCRIPTS_STATEMENTS WHERE SCRIPT_ID = :script_id AND ID = :statement_id;
    :status_code := 204;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := ''error="body"; error_description*=UTF-8'''''''''' ||
            UTL_URL.ESCAPE(
                URL => SQLERRM,
                ESCAPE_RESERVED_CHARS => FALSE,
                URL_CHARSET => ''AL32UTF8''
            );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/search/:search_term',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'tutorials/search/:search_term',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT 
    TUTORIALS.* 
FROM 
    TUTORIALS
WHERE 
    (:search_term IS NULL OR (UPPER(TITLE) LIKE ''%'' || UPPER(:search_term) || ''%'' OR UPPER(DESCRIPTION) LIKE ''%'' || UPPER(:search_term) || ''%''))');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/search/:search_term',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'scripts/search/:search_term',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT 
    SCRIPTS.* 
FROM 
    SCRIPTS
WHERE 
    (:search_term IS NULL OR (UPPER(TITLE) LIKE ''%'' || UPPER(:search_term) || ''%'' OR UPPER(DESCRIPTION) LIKE ''%'' || UPPER(:search_term) || ''%''))');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'content/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'content/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 24,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT id AS id, NULL AS script_id, TITLE, DESCRIPTION ,PUBLISHED,FEATURED,SETUP_CODE,TAGS,SHARE_KEY,CREATED_ON,CREATED_BY,UPDATED_ON,UPDATED_BY,LIKES,EXECUTIONS,DB_VERSION,SETUP_DESCRIPTION
FROM TUTORIALS

UNION ALL

SELECT NULL AS id, script_id, TITLE, DESCRIPTION ,PUBLISHED,FEATURED,SETUP_CODE,TAGS,SHARE_KEY,CREATED_ON,CREATED_BY,UPDATED_ON,UPDATED_BY,LIKES,EXECUTIONS,DB_VERSION,SETUP_DESCRIPTION
FROM SCRIPTS');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'content/search/:search_term',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'content/search/:search_term',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 25,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT id AS id, NULL AS script_id, TITLE, DESCRIPTION ,PUBLISHED,FEATURED,SETUP_CODE,TAGS,SHARE_KEY,CREATED_ON,CREATED_BY,UPDATED_ON,UPDATED_BY,LIKES,EXECUTIONS,DB_VERSION,SETUP_DESCRIPTION
FROM TUTORIALS
WHERE 
    (:search_term IS NULL OR (UPPER(TITLE) LIKE ''%'' || UPPER(:search_term) || ''%'' OR UPPER(DESCRIPTION) LIKE ''%'' || UPPER(:search_term) || ''%''))

UNION ALL

SELECT NULL AS id, script_id, TITLE, DESCRIPTION ,PUBLISHED,FEATURED,SETUP_CODE,TAGS,SHARE_KEY,CREATED_ON,CREATED_BY,UPDATED_ON,UPDATED_BY,LIKES,EXECUTIONS,DB_VERSION,SETUP_DESCRIPTION
FROM SCRIPTS
WHERE 
    (:search_term IS NULL OR (UPPER(TITLE) LIKE ''%'' || UPPER(:search_term) || ''%'' OR UPPER(DESCRIPTION) LIKE ''%'' || UPPER(:search_term) || ''%''))');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'dbversions/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.api.admin',
      p_pattern        => 'dbversions/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'select * from DB_VERSIONS_MV
-- SELECT DB_VERSION, SUM(version_count) AS total_count
-- FROM (
--     SELECT DB_VERSION, COUNT(*) AS version_count
--     FROM tutorials
--     GROUP BY DB_VERSION
--     UNION ALL
--     SELECT DB_VERSION, COUNT(*) AS version_count
--     FROM scripts
--     GROUP BY DB_VERSION
-- ) combined_versions
-- GROUP BY DB_VERSION');

COMMIT;

END;
/
