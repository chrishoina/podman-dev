-- Generated by ORDS REST Data Services 24.1.0.r1080942
-- Schema: LIVE_SQL  Date: Mon Dec 23 10:28:35 2024 
--

BEGIN
  ORDS.DEFINE_MODULE(
      p_module_name    => 'com.oracle.livesql.auth',
      p_base_path      => '/api/auth/',
      p_items_per_page => 25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.auth',
      p_pattern        => 'token',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.auth',
      p_pattern        => 'token',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_URL VARCHAR2(4000) := GET_PARAMETER( ''IDCS_URL'' );
    L_CLIENT_ID VARCHAR2(512) := UTILITIES.HEX_DECRYPT( GET_PARAMETER( ''IDCS_CLIENT_ID'' ) );
    L_CLIENT_SECRET VARCHAR2(512) := UTILITIES.HEX_DECRYPT( GET_PARAMETER( ''IDCS_CLIENT_SECRET'' ) );
    L_CANONICAL_URL VARCHAR2(4000) := GET_PARAMETER( ''CANONICAL_URL'' );
    L_WALLET_PATH VARCHAR2(4000) := NULL;

    L_BODY CLOB;
    L_RESPONSE CLOB;

    L_TOKENS JSON_OBJECT_T;
    L_USER_INFO JSON_OBJECT_T;

    L_USER_EMAIL USERS.EMAIL%TYPE;
    L_USER_DISPLAY_NAME USERS.DISPLAY_NAME%TYPE;
    L_USER_ID USERS.ID%TYPE;

    IDCS_ERROR EXCEPTION;
    BAD_REQUEST EXCEPTION;
    SCOPES_DENIED EXCEPTION;
BEGIN
    -- If login or authorization failed raise exception
    IF :error IS NOT NULL THEN
        RAISE IDCS_ERROR;
    END IF;

    IF DOES_PARAMETER_EXIST( ''WALLET_PATH'' ) THEN
        L_WALLET_PATH := GET_PARAMETER( ''WALLET_PATH'' );
    END IF;

    APEX_WEB_SERVICE.SET_REQUEST_HEADERS(
        P_NAME_01 => ''Content-Type'',
' || '        P_VALUE_01 => ''application/x-www-form-urlencoded'',
        P_RESET => TRUE
    );

    -- Begin the request to get access_token
    L_RESPONSE := APEX_WEB_SERVICE.MAKE_REST_REQUEST(
        P_URL => L_URL || ''/oauth2/v1/token'',
        P_HTTP_METHOD => ''POST'',
        P_USERNAME => L_CLIENT_ID,
        P_PASSWORD => L_CLIENT_SECRET,
        P_BODY => CASE WHEN :refresh_token IS NOT NULL THEN ''grant_type=refresh_token&refresh_token='' || :refresh_token ELSE ''grant_type=authorization_code&code='' || :code END,
        P_WALLET_PATH => L_WALLET_PATH
    );

    -- If refresh_token is used, return the response as JSON
    IF :refresh_token IS NOT NULL THEN
        OWA_UTIL.MIME_HEADER( ''application/json'', TRUE );
        HTP.P( L_RESPONSE );
        :status_code := APEX_WEB_SERVICE.G_STATUS_CODE;
        RETURN;

        -- The refresh token does not contain an expiration date
        -- As a result, to ensure the information remains valid, we are updating with timestamp
        -- in the database to keep track of the last time the user was active
        L_USER_EMAIL := UPPER( L_USER_INFO.GET_STRING( ''sub'' ) );
        
        UPDATE
            USERS
        SET
            LAST_SESSION_EXPIRED_ON = CURRENT_TIMESTAMP
        WHERE 
            1 = 1
        AND 
            EMAIL = L_USER_EMAIL;
        COMMIT;

    END IF;

    -- Parse the response to JSON
    L_TOKENS := JSON_OBJECT_T.PARSE( L_RESPONSE );

    IF APEX_WEB_SERVICE.G_STATUS_CODE != 200 THEN
        RAISE BAD_REQUEST' || ';
    END IF;

    APEX_WEB_SERVICE.G_REQUEST_HEADERS(1).NAME := ''Authorization'';
    APEX_WEB_SERVICE.G_REQUEST_HEADERS(1).VALUE := ''Bearer '' || L_TOKENS.GET_STRING( ''access_token'' );
    APEX_WEB_SERVICE.G_REQUEST_HEADERS(2).NAME := ''Accept'';
    APEX_WEB_SERVICE.G_REQUEST_HEADERS(2).VALUE := ''application/json;charset=utf-8'';

    -- Begin request to get users data
    L_RESPONSE := APEX_WEB_SERVICE.MAKE_REST_REQUEST(
        P_URL => L_URL || ''/oauth2/v1/userinfo'',
        P_HTTP_METHOD => ''GET'',
        P_WALLET_PATH => L_WALLET_PATH
    );

    -- At this point the request should only fail in case the user did not
    -- authorized any openid connect related scope
    IF APEX_WEB_SERVICE.G_STATUS_CODE != 200 THEN
        RAISE SCOPES_DENIED;
    END IF;

    L_USER_INFO := JSON_OBJECT_T.PARSE( L_RESPONSE );

    -- Register user into the database
    L_USER_EMAIL := UPPER( L_USER_INFO.GET_STRING( ''sub'' ) );
    L_USER_DISPLAY_NAME := L_USER_INFO.GET_STRING( ''name'' );

    BEGIN
  ' || '      SELECT
            ID
        INTO
            L_USER_ID
        FROM
            USERS
        WHERE
            EMAIL = L_USER_EMAIL;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            INSERT INTO
                USERS (
                    EMAIL,
                    DISPLAY_NAME,
                    ROLE_ID, 
                    LAST_SESSION_EXPIRED_ON
                )
                VALUES (
                    L_USER_EMAIL,
                    L_USER_DISPLAY_NAME,
                    1, 
                    CURRENT_TIMESTAMP
                )
            RETURNING ID INTO L_USER_ID;
            COMMIT;
        IF L_USER_ID IS NOT NULL THEN 
            UPDATE
                USERS
               SET
                LAST_SESSION_EXPIRED_ON = CURRENT_TIMESTAMP
             WHERE 
                1 = 1
               AND 
                EMAIL = L_USER_EMAIL;
            COMMIT;
        END IF; 
    END;

    OWA_UTIL.REDIRECT_URL( 
        L_CANONICAL_URL || ''#''
        || ''access_token='' || L_TOKENS.GET_STRING( ''access_token'' )
        || ''&token_type='' || L_TOKENS.GET_STRING( ''token_type'' )
        || ''&id_token='' || L_TOKENS.GET_STRING( ''id_token'' )
        || ''&refresh_token='' || L_TOKENS.GET_STRING( ''refresh_token'' )
        || ''&expires_in='' || L_TOKENS.GET_STRING( ''expires_in'' )
    );
    :status_code := 302;
EXCEPTION
    WHEN IDCS_E' || 'RROR THEN
        OWA_UTIL.REDIRECT_URL( L_CANONICAL_URL || ''#error='' || :error );
        :status_code := 302;
    WHEN BAD_REQUEST THEN
        OWA_UTIL.REDIRECT_URL(
            L_CANONICAL_URL || ''#''
            || ''error='' || L_TOKENS.GET_STRING( ''error'' )
            || ''&error_description='' || UTL_URL.ESCAPE( URL => L_TOKENS.GET_STRING( ''error_description'' ), ESCAPE_RESERVED_CHARS => TRUE )
        );
        :status_code := 302;
    WHEN SCOPES_DENIED THEN
        OWA_UTIL.REDIRECT_URL( L_CANONICAL_URL || ''#error=scopes_denied'' );
        :status_code := 302;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.auth',
      p_pattern        => 'schema',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.auth',
      p_pattern        => 'schema',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_CURRENT_USER VARCHAR2(320 BYTE) := UPPER( :current_user );
    L_USER_SCHEMA USER_SCHEMA_T;

    L_RESPONSE JSON_OBJECT_T := JSON_OBJECT_T();
BEGIN
    IF AUTHORIZATION.HAS_ROLE( L_CURRENT_USER, ''BASIC'' ) THEN
        L_USER_SCHEMA := USER_SCHEMAS.ASSIGN_SCHEMA_TO_USER( L_CURRENT_USER, :version );
    ELSE
        L_USER_SCHEMA := USER_SCHEMAS.GET_READ_ONLY_SCHEMA( :version );
    END IF;

    APEX_WEB_SERVICE.OAUTH_AUTHENTICATE(
        P_TOKEN_URL => L_USER_SCHEMA.BASE_URL || L_USER_SCHEMA.ALIAS || ''/oauth/token'',
        P_CLIENT_ID => L_USER_SCHEMA.CLIENT_ID,
        P_CLIENT_SECRET => L_USER_SCHEMA.CLIENT_SECRET,
        P_FLOW_TYPE => APEX_WEB_SERVICE.OAUTH_CLIENT_CRED
    );
    IF APEX_WEB_SERVICE.G_STATUS_CODE != 200 THEN
        RAISE_APPLICATION_ERROR( -20000, ''An error occurred while obtaining a token. OAuth authentication request to the database returned with status '' || APEX_WEB_SERVICE.G_STATUS_CODE );
    END IF;

    L_RESPONSE.PUT( ''access_token'', APEX_W' || 'EB_SERVICE.G_OAUTH_TOKEN.TOKEN );
    L_RESPONSE.PUT( ''token_type'', ''bearer'' );
    L_RESPONSE.PUT( ''expires_in'', FLOOR( ( APEX_WEB_SERVICE.G_OAUTH_TOKEN.EXPIRES - CURRENT_DATE ) * 24 * 60 * 60 ) );
    L_RESPONSE.PUT( ''expire_date'', APEX_WEB_SERVICE.G_OAUTH_TOKEN.EXPIRES );
    L_RESPONSE.PUT( ''id'', L_USER_SCHEMA.ID );
    L_RESPONSE.PUT( ''user'', L_CURRENT_USER );
    L_RESPONSE.PUT( ''name'', L_USER_SCHEMA.NAME );
    L_RESPONSE.PUT( ''alias'', L_USER_SCHEMA.ALIAS );
    L_RESPONSE.PUT( ''db_version'', L_USER_SCHEMA.DB_VERSION );
    L_RESPONSE.PUT( ''base_url'', L_USER_SCHEMA.BASE_URL );

    OWA_UTIL.MIME_HEADER( ''application/json'', TRUE );
    HTP.P( L_RESPONSE.TO_STRING() );
    :status_code := 200;
EXCEPTION
    WHEN OTHERS THEN
        :errorReason := UTILITIES.STRING_TO_ERROR_REASON( ''Bad Request'' );
        :status_code := 400;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'com.oracle.livesql.auth',
      p_pattern        => 'whoami',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'com.oracle.livesql.auth',
      p_pattern        => 'whoami',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'DECLARE
    L_CURRENT_USER VARCHAR2(320 BYTE) := UPPER( :current_user );
    L_RESPONSE CLOB;

    UNAUTHORIZED EXCEPTION;
BEGIN
    IF L_CURRENT_USER IS NULL THEN
        RAISE UNAUTHORIZED;
    END IF;

    SELECT
        JSON_OBJECT(
            KEY ''email'' VALUE USERS.EMAIL,
            KEY ''name'' VALUE USERS.DISPLAY_NAME,
            KEY ''disclaimer_accepted_on'' VALUE USERS.DISCLAIMER_ACCEPTED_ON,
            KEY ''role'' VALUE ROLES.NAME
            RETURNING CLOB
        )
    INTO
        L_RESPONSE
    FROM
        ROLES JOIN USERS ON
            USERS.EMAIL = L_CURRENT_USER
            AND USERS.ROLE_ID = ROLES.ID;

    OWA_UTIL.MIME_HEADER( ''application/json'', TRUE );
    HTP.P( L_RESPONSE );
    :status_code := 200;
EXCEPTION
    WHEN UNAUTHORIZED THEN
        :errorReason := UTILITIES.STRING_TO_ERROR_REASON( ''Unauthorized'' );
        :status_code := 401;
    WHEN NO_DATA_FOUND THEN
        :errorReason := UTILITIES.STRING_TO_ERROR_REASON( ''Unauthorized'' );
        :status_co' || 'de := 401;
    WHEN OTHERS THEN
        :errorReason := UTILITIES.STRING_TO_ERROR_REASON( ''Bad Request'' );
        :status_code := 400;
END;');

    
        
COMMIT;

END;
/
